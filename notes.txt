https://github.com/MaharaniJ/backend-login-signup/blob/master/server.js

https://github.com/MaharaniJ/e-commerce-backend/blob/main/middleware/authenticate.js

https://github.com/MaharaniJ/userAuthentication/blob/master/server/server.js
https://github.com/MaharaniJ/Password-reset-server/blob/main/routes/router.js

https://github.com/MaharaniJ/register-mern/blob/main/server/server.js

https://github.com/MaharaniJ/server-hashed-token/blob/main/controllers.js/usercontroller.js

https://github.com/MaharaniJ/login-logout-backend/tree/main/routes

https://github.com/MaharaniJ/URL-Shortener-server/blob/main/controllers/auth/register.js

https://github.com/MaharaniJ/server-social-login/blob/main/controllers/users.js

jwt.sign() method

https://github.com/MaharaniJ/backend-stackoverflow/blob/main/server.js

https://github.com/MaharaniJ/social-login-backend/blob/main/server.js

https://github.com/MaharaniJ/food-delivery-app-backend/blob/main/functions/routes/userRouter.js

https://github.com/MaharaniJ/backend-crud-operation/blob/main/routes/userRoute.js

https://github.com/MaharaniJ/gmail-server/blob/main/routes/route.js

generateRouter()

   const token = await userValid.generateAuthtoken()

                //// Cookie-Generate
                res.cookie("usercookie", token, {
                    expires: new Date(Date.now() + 9000000),
                    httpOnly: true
                });

                const result = {
                    userValid,
                    token
                }
                res.status(201).json({ status: 201, result })

            }

        } else {
            res.json({
                message: "Password was incorrect!!",
            });

https://github.com/MaharaniJ?page=3&tab=repositories


const addToCart = async (req, res) => {
  try {
    const { id } = req.params;
    const cart = await Products.findOne({ id: id });

    const Usercontact = await USER.findOne({ _id: req.userID });

    if (Usercontact) {
      const cartData = await Usercontact.addcartdata(cart);

      await cartData.save();
      return res.status(201).json(cartData);
    } else {
      res.status(401).json({ error: "Invalid user" });
    }
  } catch (error) {
    res.status(401).json({ error: "Invalid user context" });
  }
};


userSchema.methods.addcartdata = async function (product) {
  try {
    const existingProduct = this.carts.find((item) =>
      item.productId.equals(product._id)
    );

    if (existingProduct) {
      existingProduct.quantity += 1;
    } else {
      this.carts.push({
        productId: product._id,
        quantity: 1,
      });
    }

    await this.save();
    return this.carts;
  } catch (error) {
    console.log(error + "");
    throw error;
  }
};


const mongoose = require('mongoose');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');

const userSchema = new mongoose.Schema({
  // ... other fields ...
  tokens: [
    {
      token: {
        type: String,
        required: true,
      },
    },
  ],
});

userSchema.methods.generateAuthToken = async function () {
  const user = this;
  const token = jwt.sign({ id: user._id }, secretKey, { expiresIn: '1d' });
  user.tokens = user.tokens.concat({ token });
  await user.save();
  return token;
};

userSchema.statics.findByCredentials = async (email, password) => {
  const user = await User.findOne({ email });

  if (!user) {
    throw new Error('Invalid email or password');
  }

  const isMatch = await bcrypt.compare(password, user.password);

  if (!isMatch) {
    throw new Error('Invalid email or password');
  }

  return user;
};

const User = mongoose.model('User', userSchema);

module.exports = User;





loginregister:

// const registerUser = async (req, res) => {
//   const { firstname, lastname, email, password, cpassword } = req.body;

//   if (!firstname || !lastname || !email || !password || !cpassword) {
//     return res
//       .status(422)
//       .json({ error: "Please fill in all the required fields." });
//   }

//   try {
//     const preuser = await USER.findOne({ email: email });

//     if (preuser) {
//       return res.status(422).json({ error: "This email is already in use." });
//     } else if (password !== cpassword) {
//       return res.status(422).json({ error: "Passwords do not match." });
//     } else {
//       const newUser = new USER({
//         firstname,
//         lastname,
//         email,
//         password,
//         cpassword,
//       });
//       const salt = await bcrypt.genSalt(10);
//       const hash = await bcrypt.hash(password, salt);
//       newUser.password = hash;
//       await newUser.save();
//       return res.status(200).json({ message: "User Registered successfully!" });
//     }
//   } catch (error) {
//     res.status(422).json({ error: "Registration failed. Please try again." });
//   }
// };

// const loginUser = async (req, res) => {
//   const { email, password } = req.body;
//   if (!email || !password) {
//     return res
//       .status(400)
//       .json({ status: "fail", error: "Required fields are empty" });
//   }
//   try {
//     const loginuser = await USER.findOne({ email: email });
//     if (loginuser) {
//       const isMatch = await bcrypt.compare(password, loginuser.password);

//       if (!isMatch) {
//         return res
//           .status(400)
//           .json({ status: "fail", error: "Invalid password" });
//       } else {
//         let token = jwt.sign({ id: loginuser._id }, secretKey, {
//           expiresIn: "1d",
//         });
//         // loginuser.tokens.push({ token });
//         loginuser.tokens = loginuser.tokens.concat({ token });

//         // Save the user document with the new token
//         await loginuser.save();

//         req.headers.authorization = `Bearer ${token}`;

//         res.status(200).json({ token: token });
//       }
//     }
//   } catch (error) {
//     console.error("Registration error:", error);
//     res.status(422).json({
//       error: error.message || "Registration failed. Please try again.",
//     });
//   }
// };


authenticate:

const jwt = require("jsonwebtoken");
const {USER} = require("../models/userSchema")
const secretKey = process.env.SECRET_KEY;

let authentication = async function (req, res, next) {
  console.log("header MEssage", req.headers);
  if (req.headers.authorization) {
    const token = req.headers.authorization && req.headers.authorization.split(" ")[1];
    try {
      const decode = await jwt.verify(token, secretKey);
      console.log(decode);
      const rootUser = await USER.findOne({
        _id: decode._id,
        "tokens.token": token,
      });

      if (!rootUser) {
        throw new Error("User Not Found");
      }

      req.token = token;
      req.rootUser = rootUser;
      req.userID = rootUser._id;

      next();
    } catch (error) {
      console.error("Authentication error:", error);
      return res.status(401).json({ message: "Unauthorized" });
    }
  } else {
    res.status(401).json({ message: "Unauthorized" });
  }
};

module.exports = { authentication };


db:

userSchema.pre("save", async function (next) {
  if (this.isModified("password")) {
    this.password = await bcrypt.hash(this.password, 12);
    this.cpassword = await bcrypt.hash(this.cpassword, 12);
  }
  next();
});

userSchema.methods.generateAuthToken = async function () {
  try {
    let token = jwt.sign({ _id: this._id }, secretKey, {
      expiresIn: "1d",
    });
    console.log("geneate-Token",token)
    if (!token) {
      throw new Error("Token generation failed.");
    }

    this.tokens = this.tokens.concat({ token: token });
    await this.save();

    return token;
  } catch (error) {
    console.error("Token generation error:", error);
    throw error; // Re-throw the error for higher-level handling if necessary.
  }
};